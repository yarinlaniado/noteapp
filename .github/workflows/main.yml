name: CI/CD Pipeline
on:
  push:
    branches:
      - dev
    paths-ignore:
      - 'version.txt'  # Ignore changes to version.txt file
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Extract commit message
      - name: Get commit message
        run: echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      # Read the current version
      - name: Read current version
        run: echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      # Determine version increment
      - name: Determine version increment
        run: |
          IFS='.' read -ra VER <<< "$CURRENT_VERSION"
          MAJOR=${VER[0]}
          MINOR=${VER[1]}
          PATCH=${VER[2]}
          if [[ $COMMIT_MSG == *"[major]"* ]]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [[ $COMMIT_MSG == *"[minor]"* ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          else
            PATCH=$((PATCH+1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Update the version file
      - name: Update version file
        run: |
          echo $NEW_VERSION > version.txt
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add version.txt
          git commit -m "Update version to $NEW_VERSION"
          git push https://${{ secrets.DAVID }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}

      # Rest of your existing steps
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          ls -last
          pip install -r requirements.txt

      - name: Docker-compose up before tests
        run: docker-compose up -d

      - name: Run Tests
        id: test
        run: python3 app/test.py
        
      - name: Debug environment variables
        run: |
          echo "Commit Message: $COMMIT_MSG"
          echo "Current Version: $CURRENT_VERSION"
          echo "New Version: $NEW_VERSION"
      
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image to DockerHub
        if: steps.test.outcome == 'success'
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/noteapp"
          VERSION="${{ env.NEW_VERSION }}"
          docker tag yarinlaniado/noteapp:latest "$IMAGE_NAME:$VERSION"
          docker push "$IMAGE_NAME:$VERSION"

      - name: Clean up
        run: |
          docker stop note-app-container || true
          docker rm note-app-container || true
          docker rmi note-app || true

      - name: Deploy to EKS
        if: steps.test.outcome == 'success'
        run: |
          # Placeholder for deploying application to EKS

      - name: Notify on Test Failure
        if: steps.test.outcome != 'success'
        run: echo "tests failed! check the workflow"
